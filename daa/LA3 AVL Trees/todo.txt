AVL Trees - 01 Rotate (zigleft & zigright)
by Jay Vince Serato

In a Balanced Search Tree such as an AVL Tree, the basic operation for the tree is to rotate the nodes. This is to attempt to reduce the height of the tree thus improving the core operations of the tree, including the insert and search.

 

Your goal for this problem is to perform the trinode restructuring given the grandparent node using the two primitive rotate operations on parent-child nodes: zigleft and zigright -- which you are also to implement.

 

After completing the zigleft and zigright methods, go to the restructure method. In this method, the grandparent node is already given. You will be using this method when you encounter a violation, but that will be done later. Your task in this method is to find the parent and the child node for which you are going to perform the trinode restructuring.

To recall, the parent is one of the child of the grandparent whichever is of a greater height. It is assured that these children will not have equal height because this is the source of the violation in the first place. Speaking of height, you are to implement the height method of the node in its respective node.h header file, and use this method to compare the nodes' heights.

After which, find the child node which is once again a child of the parent node you classified above. This time, there is a chance to which both the children would have the same height. In this scenario, choose whichever child that will yield the lesser amount of rotate operations.

Then using the given calculated configuration of the grandparent, parent, and child, you can now perform the trinode restructuring. First print the trinode restructuring operation (whether ZIGLEFT, ZIGRIGHT, ZIGZAGLEFT, or ZIGZAGRIGHT) on each of the if statements. Then, perform the trinode restructuring only using one or two of the primitive rotate operations zigleft and/or zigright.

 

After doing so, you are now ready to improve the insert and remove operations of the existing Binary Search Tree. Remember that as you insert or delete an element, you are to recursively check for the violation (or imbalance) starting from the parent node to which you added or removed an element until you reach the root (including checking the root for violations). You can use helper methods so you will only utilize one method for the checking when inserting or deleting.

 

Several comments are added in the code so you will understand the state of the three nodes relative to each other. Feel free to delete them as well.
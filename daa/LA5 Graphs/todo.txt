Graphs - Adjacency Matrix
by Jay Vince Serato

Implement the Graph ADT using Adjacency Matrix. The vertices are represented as characters and the edges are represented as integers.

 

•insertVertex(x): Creates a new Vertex storing element x.

•insertEdge(u, v, x): Creates a new Edge from vertex u to vertex v, storing element x; print "Not Null" if there already exists an edge from u to v.

 

•int numVertices( ): Returns the number of vertices of the graph.

•char* vertices( ): Returns a character array (via character pointer) to all the vertices of the graph (arranged in the order of how they are added).

•int numEdges( ): Returns the number of edges of the graph.

•int* edges( ): Returns an integer array (via integer pointer) of all the edges of the graph (arranged in the order of how they are added).

•int getEdge(u, v): Returns the edge from vertex u to vertex v, if one exists; otherwise return 0.

•char* endVertices(e): Returns a character array (via character pointer) containing the two endpoint vertices of edge e. Since the graph is directed, the first vertex is the origin and the second is the destination. If edge does not exist, return "-" as both origin and destination.

•char opposite(v, e): For edge e incident to vertex v, returns the other vertex of the edge; returns "-" if e is not incident to v.

•int outDegree(v): Returns the number of outgoing edges from vertex v.

•int inDegree(v): Returns the number of incoming edges to vertex v. For an undirected graph, this returns the same value as does outDegree(v).

•int* outgoingEdges(v): Returns an integer array (via integer pointer) of all outgoing edges from vertex v. This will be arranged in such a way that outgoing edges towards vertices that were added first will be listed first as well.

•int* incomingEdges(v): Returns an integer array (via integer pointer) of all incoming edges to vertex v. This will be arranged in such a way that incoming edges from vertices that were added first will be listed first as well.

•int removeVertex(v): Removes vertex v and all its incident edges from the graph. This will return the number of edges that were also removed in the process.

•bool removeEdge(e): Removes edge e from the graph. Returns true when able to remove e.